<html>
  <head>
    <title>Welcome Trainee-task2</title>
  </head>
  <body>
    <h2>Задача 1</h2>

<p>
1) Дана последовательность случайных цифр любой длины и «волшебное» положительное число, больше нуля. 
Напишите функцию magic(), принимающую эти аргументы, и выясните, можно ли разделить сумму квадратов последовательности на «волшебное» число без остатка. 
В качестве ответа возвращается «Волшебство случается» в случае успеха или «Никакого волшебства», если разделить нельзя.
</p>

<p>### Тесты
<ul>
    <li>magic(2, 5, 7, k=5)   Никакого волшебства</li>
    <li>magic(2, 5, 7, k=39) Волшебство случается</li>
    <li>magic(2, 5, 7, k=2)   Волшебство случается</li>
</ul>
</p>

<p class="bold center">Решение:</p>


<?php

//Регистритуем функцию что принимает magic(2, 5, 7, k=5)
$var = array(2, 5, 7); $k = 2;    //массив и ключ
//Перебираем в цикле 
$result = 0;
foreach ($var as $value) {
  $result += $value ** 2;
}
echo ('<p class="center line">');
echo ('Сумма квадратов= ' . $result . '/ делим на ключ ' . $k . '<br>Получаем:');
$delim = $result/$k;
echo ($delim);

if (is_int($delim)) { //Проверка не целое число
    echo (' <span class="green">Волшебство случается</span>');}
    else {  echo (' <span class="red">Никакого волшебства</span>');};

echo ('</p>');
print_r ($sum);

function magic($var, $k) //Оформляем это функцией magic()
    {
    $result = 0;
    foreach ($var as $value) {
    $result += $value ** 2;
    }
    $delim = $result/$k;
    if (is_int($delim)) { //Проверка не целое число
    echo ('***');
    echo (' <span class="green">Волшебство случается</span>');}
    else {
    echo (' <span class="red">Никакого волшебства</span>');};
    echo ('***');
    }

    magic(array(2, 5, 7), 2); //Пример использования
?>

<h2>Задача 2</h2>

<p>2) На входе имеем список строк разной длины. 
Необходимо написать функцию all_eq(lst), которая вернет новый список из строк одинаковой длины. 
Длину итоговой строки определяем исходя из самой большой из них. 
Если конкретная строка короче самой длинной, дополнить ее нижними подчеркиваниями с правого края до требуемого количества символов.
Расположение элементов начального списка не менять.</p>

<p>### Тесты
    <ul>
        <li>all_eq(['крот', 'белка', 'выхухоль']) -> ['крот____', 'белка___', 'выхухоль']</li>
        <li>all_eq(['a', 'aa', 'aaa', 'aaaa', 'aaaaa']) -> ['a____', 'aa___', 'aaa__', 'aaaa_', 'aaaaa']</li>
        <li>all_eq(['qweasdqweas', 'q', 'rteww', 'ewqqqqq']) -> ['qweasdqweas', 'q__________', 'rteww______', 'ewqqqqq____']</li>
    </ul>
</p>

<p class="bold center">Решение:</p>

<?php

$input = array('qweasdqweas', 'q', 'rteww', 'ewqqqqq'); //Входящий массив
$orig = $input; //Пришлось повторить чтобы не влияла сортировка ниже
array_multisort(array_map('strlen', $input), $input); //сотируем массив и сопоставляем по длинне
echo ('<p class="center line">');
echo ('Самое длинное слово: ' . $end = end($input)); // Получаем последнее end самое длинное слово
echo ('<br>Число символов:' . iconv_strlen($end)); //Для проверки

//Перебираем в цикле 
    foreach ($orig as $in) {
        $result = str_pad($in,  11, "_"); //Допишем 11 или сколько-то знаков _
        $arr[] = $result; // в общий массив записывается добавленые
    }
    echo ('<br>Получаем: <span class="green">');
    print_r ($arr);
    echo ('</span>');
    echo ('</p>');

function all_eq($input) //Оформляем это функцией all_eq(lst)
    {
        $orig = $input;
        array_multisort(array_map('strlen', $input), $input); //сотируем массив и сопоставляем по длинне
        foreach ($orig as $in) {
            $result = str_pad($in,  11, "_"); //Допишем 11 или сколько-то знаков _
            $arr[] = $result; // в общий массив записывается добавленые
        }
        echo ('***');
        print_r ($arr);
        echo ('***');
    }

    all_eq(array('qweasdqweas', 'q', 'rteww', 'ewqqqqq')); //Пример использования вызвали и передали массив на вход

?>


<h2>Задача 3</h2>

<p>3) Предоставлен список натуральных чисел. Требуется сформировать из них множество. Если какое-либо число повторяется, то преобразовать его в строку по образцу: например, если число 4 повторяется 3 раза, то в множестве будет следующая запись: само число 4, строка «44» (второе повторение, т.е. число дублируется в строке), строка «444» (третье повторение, т.е. строка множится на 3). Реализуйте вывод множества через функцию set_gen().</p>

<p>### Тесты
// последовательность вывода не имеет значения
<ul>
    <li>list_1 = [1, 1, 3, 3, 1] -> set_gen(list_1)  -> {1, 3, '111', '33', '11'}</li>
    <li>list_2 = [5, 5, 5, 5, 5, 5, 5] -> set_gen(list_2) -> {'5555555', 5, '55', '55555', '5555', '555555', '555'}</li>
    <li>list_3 = [2, 2, 1, 2, 2, 5, 6, 7, 1, 3, 2, 2]->set_gen(list_3) -> {1, 2, 3, 5, 6, 7, '22', '2222', '22222', '222', '11', '222222'} </li>
</ul>
</p>

<p class="bold center">Решение:</p>

<?php 

$array = array(1, 1, 3, 3, 1); //Входящий массив
$result = array_count_values($array);    //считаем число повторений
$unic = array_unique($array); //Оставляем уникальные (просто тест)

foreach ($result as $key => $value) { //Перебираем ключ-значение и повторяем нужное число раз повторений
        $n = 0; //Сброс при каждом проходе чтобы запускался след цикл
        for ($value; $n <= $value; $n++) {
            $allresult[] = str_repeat($key, $n); //Повторяем просто число n раз и пишем это дело в новый массив
          }
}

echo ('<p class="center line">');
echo ('Входящий массив:');
print_r ($array);
echo ('<br>Число повторений: '); 
print_r ($result);
echo ('<br>Уникальные значения: '); 
print_r ($unic);
echo ('<br>Получаем: <span class="green">');
print_r ($allresult);
echo ('</span>');
echo ('</p>');

function set_gen($array) //Оформляем это функцией set_gen()
{
    $result = array_count_values($array);    //считаем число повторений
    foreach ($result as $key => $value) { //Перебираем ключ-значение и повторяем нужное число раз повторений
        $n = 0; //Сброс при каждом проходе чтобы запускался след цикл
        for ($value; $n <= $value; $n++) {
            $allresult[] = str_repeat($key, $n); //Повторяем просто число n раз и пишем это дело в новый массив
          } 
}   
    echo ('***');
    print_r ($allresult);
    echo ('***');
}
    set_gen(array(1, 1, 3, 3, 1)); //Пример использования вызвали и передали массив на вход

?>

<style>
    .green {color:green;}
    .red {color:red;}
    .bold {font-weight:bold;}
    .line { 
    border-bottom: 1px solid #bbb;
    border-top: 1px solid #bbb;
    padding: 20px;}
    .center {
    text-align: center;
    }
</style>

  </body>
</html>